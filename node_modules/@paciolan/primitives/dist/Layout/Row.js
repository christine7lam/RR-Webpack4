"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactSizeme = require("react-sizeme");

var _reactSizeme2 = _interopRequireDefault(_reactSizeme);

var _styles = require("@material-ui/core/styles");

var _Column = require("./Column");

var _Column2 = _interopRequireDefault(_Column);

var _Layout = require("./Layout.style");

var _utilities = require("@paciolan/utilities");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var propSelect = _utilities.componentUtils.propSelect;


var sizeMeConfig = {
  refreshRate: 120
};

// TODO: Design Decision - Should certain props be designed to be 'inherited' by Columns?
// For example, if I wanted all 8 Columns within the Row to have verticalAlign='center', should I be able to define it once on the Row
// and have the property be automatically propagated to its direct Column children, while still allowing individual Columns to override it?
// Or does that add unnecessary layer of complexity to this component code and make the page markup comprehension more difficult?
var _Row = function _Row(props) {
  var allowedPropKeys = ["className"];
  var allowedProps = propSelect(props, allowedPropKeys);

  var fold = props.fold,
      size = props.size,
      gutter = props.gutter;

  var foldWidth = fold || 0;
  var isFolded = foldWidth && size.width < foldWidth;
  var childLength = _react2.default.Children.count(props.children);
  var evaluateHidden = function evaluateHidden(hideOn) {
    return isFolded && hideOn === "fold" || !isFolded && hideOn === "row" || typeof hideOn === "function" && hideOn(size.width);
  };
  var children = [];

  if (childLength) {
    var colSizes = _react2.default.Children.map(props.children, function (child) {
      if (child.type === _Column2.default && !child.props.always && !evaluateHidden(child.props.hideOn)) return parseInt(child.props.size, 0) || 1;
      return 0;
    });
    var columnLength = colSizes.filter(function (v) {
      return v > 0;
    }).length;
    var totalSize = colSizes.reduce(function (p, n) {
      return p + n;
    }, 0);
    var gutterWidth = gutter || 0;

    children = _react2.default.Children.map(props.children, function (child, index) {
      if (child.type !== _Column2.default) {
        // childTypeError('<Row>', '<Column>', child)
        return null;
      }

      var childSize = parseInt(child.props.size, 0) || 1;
      var setGutter = 0;
      var setWidth = 0;
      var setAlign = child.props.align || {};

      // setAlign can be passed an object to dictate different alignment for `fold` and `row` modes
      // or a string can be passed to dictate a single alignment setting for both modes
      if ((typeof setAlign === "undefined" ? "undefined" : _typeof(setAlign)) === "object") setAlign = isFolded ? setAlign.fold : setAlign.row;

      if (gutterWidth) {
        // enabling consistent gutter spacing requires a way to identify 'last visible item' within the collection
        var passedNonColumns = colSizes.slice(0, index).filter(function (v) {
          return v === 0;
        }).length;
        var isLastVisibleChild = index - passedNonColumns === columnLength - 1;
        setGutter = isFolded || isLastVisibleChild ? 0 : gutterWidth;

        // manual width calculation is preferred in place of flexbox-sized columns when gutters are involved
        // this is due to the design of the Row element allowing for a dynamic number of columns per row instance
        var singleColumnWidth = (size.width - gutterWidth * (totalSize - 1)) / totalSize;
        setWidth = singleColumnWidth * childSize + (childSize - 1) * gutterWidth;
      }

      return _react2.default.cloneElement(child, {
        isFolded: isFolded,
        isHidden: evaluateHidden(child.props.hideOn),
        width: setWidth,
        gutter: setGutter,
        align: setAlign
      });
    });
  }

  return _react2.default.createElement(
    "div",
    allowedProps,
    children
  );
};

var StyledRow = (0, _Layout.rowStyle)(_Row);
var StyledSizedRow = (0, _reactSizeme2.default)(sizeMeConfig)((0, _Layout.rowStyle)(_Row));

var Row = function Row(props) {
  return props.fold || props.gutter || _react2.default.Children.count(props.children) > 0 ? _react2.default.createElement(StyledSizedRow, props) : _react2.default.createElement(StyledRow, props);
};

exports.default = (0, _styles.withTheme)()(Row);


Row.propTypes = {
  height: _propTypes2.default.number,
  fold: _propTypes2.default.number,
  size: _propTypes2.default.number,
  gutter: _propTypes2.default.number,
  align: _propTypes2.default.any,
  verticalAlign: _propTypes2.default.string,
  className: _propTypes2.default.string,
  "data-testid": _propTypes2.default.string
};